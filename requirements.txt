import React, { useMemo, useState } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Copy, Download, Sparkles, Code2, Settings2 } from "lucide-react";

// --- Minimal template generators ---
const streamlitTemplate = ({ appName, description, features, auth, database }) => `# ${appName}\n\nimport streamlit as st\n\nst.set_page_config(page_title="${appName}", page_icon="âœ¨", layout="wide")\n\nst.title("${appName}")\nst.write("""${description || ""}""")\n\n# Features\nfeatures = ${JSON.stringify(features)}\nif features:\n    st.subheader("Enabled Features")\n    for f in features:\n        st.write("- ", f)\n\n${auth ? `# Authentication (demo only)\nif 'logged_in' not in st.session_state:\n    with st.sidebar:\n        st.header('Login')\n        u = st.text_input('Username')\n        p = st.text_input('Password', type='password')\n        if st.button('Sign in'):\n            st.session_state.logged_in = True\n            st.experimental_rerun()\nif not st.session_state.get('logged_in'):\n    st.stop()\n` : ""}
# Main area\ncol1, col2 = st.columns(2)\nwith col1:\n    st.metric("Users", 128)\n    st.line_chart({"data": [1, 3, 2, 5, 4, 6]})\nwith col2:\n    st.bar_chart({"data": [5, 1, 3, 2, 4, 6]})\n\n# Database placeholder\nst.caption("Database: ${database || "None"}")\n`;

const reactTemplate = ({ appName, description, features, auth, database }) => `// ${appName} - React + Vite\n// Run: npm create vite@latest ${appName.toLowerCase().replace(/\s+/g, '-') } -- --template react\n// cd ${appName.toLowerCase().replace(/\s+/g, '-') } && npm i && npm run dev\n\nimport { useState } from 'react'\nimport './App.css'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  const features = ${JSON.stringify(features)}\n  ${auth ? `const [loggedIn, setLoggedIn] = useState(false)` : ``}\n\n  return (\n    <div className="container">\n      <h1>${appName}</h1>\n      <p>${description || ""}</p>\n\n      {features.length > 0 && (\n        <div>\n          <h3>Enabled Features</h3>\n          <ul>\n            {features.map((f) => <li key={f}>{f}</li>)}\n          </ul>\n        </div>\n      )}\n\n      ${auth ? `<div style={{border:'1px solid #eee', padding: 12, borderRadius: 8}}>
        {loggedIn ? (
          <p>Welcome!</p>
        ) : (
          <form onSubmit={(e)=>{e.preventDefault(); setLoggedIn(true)}}>
            <h3>Login</h3>
            <input placeholder="Username" />
            <input placeholder="Password" type="password" />
            <button>Sign in</button>
          </form>
        )}
      </div>` : ``}\n\n      <div className="card">\n        <button onClick={() => setCount((count) => count + 1)}>count is {count}</button>\n      </div>\n      <small>Database: ${database || "None"}</small>\n    </div>\n  )\n}\n\nexport default App\n`;

const expressTemplate = ({ appName, description }) => `// ${appName} - Express API\nimport express from 'express'\nconst app = express()\napp.use(express.json())\n\napp.get('/', (req, res) => {\n  res.json({ name: '${appName}', description: '${(description||"").replace(/`/g, "\`")}' })\n})\n\napp.listen(3000, () => console.log('Server running on http://localhost:3000'))\n`;

export default function AppCodeGenerator() {
  const [appName, setAppName] = useState("My Awesome App");
  const [platform, setPlatform] = useState("streamlit");
  const [description, setDescription] = useState("");
  const [auth, setAuth] = useState(true);
  const [database, setDatabase] = useState("Supabase");
  const [features, setFeatures] = useState(["Dashboard", "CRUD", "File Uploads"]);
  const [includeReadme, setIncludeReadme] = useState(true);

  const code = useMemo(() => {
    const payload = { appName, description, auth, database, features };
    switch (platform) {
      case "react":
        return reactTemplate(payload);
      case "express":
        return expressTemplate(payload);
      default:
        return streamlitTemplate(payload);
    }
  }, [appName, description, auth, database, features, platform]);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(code);
    } catch {
      // ignore
    }
  };

  const downloadFile = () => {
    const blobParts = [code];
    if (includeReadme) {
      const readme = `# ${appName}\n\n${description || "Describe your app here."}\n\n## Getting Started\n\n### Streamlit\n- Install: \`pip install streamlit\`\n- Run: \`streamlit run app.py\`\n\n### React\n- Create: \`npm create vite@latest ${appName.toLowerCase().replace(/\s+/g, '-') } -- --template react\`\n- Run: \`npm i && npm run dev\`\n\n### Express\n- Install: \`npm i express\`\n- Run: \`node index.js\`\n`;
      blobParts.push("\n\n\n/* README.md */\n\n" + readme);
    }
    const blob = new Blob(blobParts, { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${appName.replace(/\s+/g, "_")}_${platform}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const toggleFeature = (label) => {
    setFeatures((prev) =>
      prev.includes(label) ? prev.filter((f) => f !== label) : [...prev, label]
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-white">
      <header className="sticky top-0 z-10 bg-white/70 backdrop-blur border-b">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <motion.div initial={{ scale: 0.9, opacity: 0 }} animate={{ scale: 1, opacity: 1 }}>
              <Sparkles className="h-6 w-6" />
            </motion.div>
            <span className="font-bold text-lg">App Code Generator</span>
            <Badge variant="secondary" className="ml-2">Outer Interface</Badge>
          </div>
          <div className="text-sm text-slate-600">Built with React + Tailwind + shadcn/ui</div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 py-6 grid md:grid-cols-2 gap-6">
        {/* Left: Controls */}
        <Card className="shadow-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><Settings2 className="h-5 w-5" /> Configure your app</CardTitle>
          </CardHeader>
          <CardContent className="space-y-5">
            <div className="space-y-2">
              <Label>App Name</Label>
              <Input value={appName} onChange={(e) => setAppName(e.target.value)} placeholder="e.g., StudyHub" />
            </div>

            <div className="space-y-2">
              <Label>Short Description</Label>
              <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder="What does your app do?" />
            </div>

            <div className="space-y-2">
              <Label>Target Platform</Label>
              <Select value={platform} onValueChange={setPlatform}>
                <SelectTrigger>
                  <SelectValue placeholder="Choose a platform" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="streamlit">Streamlit (Python)</SelectItem>
                  <SelectItem value="react">React (Web)</SelectItem>
                  <SelectItem value="express">Express (API)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Database</Label>
              <Select value={database} onValueChange={setDatabase}>
                <SelectTrigger>
                  <SelectValue placeholder="Pick a database" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Supabase">Supabase</SelectItem>
                  <SelectItem value="Firebase">Firebase</SelectItem>
                  <SelectItem value="PostgreSQL">PostgreSQL</SelectItem>
                  <SelectItem value="None">None</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-3">
              <Label>Features</Label>
              <div className="grid grid-cols-2 gap-3">
                {[
                  "Dashboard",
                  "CRUD",
                  "Auth Pages",
                  "File Uploads",
                  "Charts",
                  "Notifications",
                ].map((f) => (
                  <label key={f} className="flex items-center gap-2 text-sm">
                    <Checkbox checked={features.includes(f)} onCheckedChange={() => toggleFeature(f)} />
                    {f}
                  </label>
                ))}
              </div>
            </div>

            <div className="flex items-center justify-between py-2">
              <label className="flex items-center gap-2 text-sm">
                <Switch checked={auth} onCheckedChange={setAuth} /> Include basic authentication
              </label>
              <label className="flex items-center gap-2 text-sm">
                <Switch checked={includeReadme} onCheckedChange={setIncludeReadme} /> Include README
              </label>
            </div>

            <div className="flex gap-3">
              <Button onClick={copyToClipboard} className="gap-2"><Copy className="h-4 w-4" /> Copy code</Button>
              <Button variant="secondary" onClick={downloadFile} className="gap-2"><Download className="h-4 w-4" /> Download</Button>
            </div>
          </CardContent>
        </Card>

        {/* Right: Preview */}
        <Card className="shadow-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><Code2 className="h-5 w-5" /> Generated code</CardTitle>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="code">
              <TabsList>
                <TabsTrigger value="code">Code</TabsTrigger>
                <TabsTrigger value="instructions">How to run</TabsTrigger>
              </TabsList>
              <TabsContent value="code">
                <pre className="max-h-[560px] overflow-auto rounded-xl bg-slate-950 text-slate-50 p-4 text-xs leading-relaxed">
                  <code>{code}</code>
                </pre>
              </TabsContent>
              <TabsContent value="instructions">
                <ol className="list-decimal pl-6 space-y-2 text-sm text-slate-700">
                  <li>Choose a <strong>Platform</strong> on the left.</li>
                  <li>Edit the <strong>App Name</strong>, <strong>Description</strong>, and <strong>Features</strong>.</li>
                  <li>Click <strong>Copy code</strong> or <strong>Download</strong>.</li>
                  <li>
                    For <strong>Streamlit</strong>: save as <code>app.py</code>, install Streamlit (<code>pip install streamlit</code>), then run <code>streamlit run app.py</code>.
                  </li>
                  <li>
                    For <strong>React</strong>: create a Vite app, replace <code>src/App.jsx</code> with the generated code, then <code>npm run dev</code>.
                  </li>
                  <li>
                    For <strong>Express</strong>: save as <code>index.mjs</code>, install Express (<code>npm i express</code>), then <code>node index.mjs</code>.
                  </li>
                </ol>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </main>

      <footer className="max-w-6xl mx-auto px-4 pb-10 text-center text-xs text-slate-500">
        Â© {new Date().getFullYear()} CodeGen UI. This is just the outer interfaceâ€”you can hook it to real generators later.
      </footer>
    </div>
  );
}
